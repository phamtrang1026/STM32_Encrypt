/*
 / _____)             _              | |
( (____  _____ ____ _| |_ _____  ____| |__
 \____ \| ___ |    (_   _) ___ |/ ___)  _ \
 _____) ) ____| | | || |_| ____( (___| | | |
(______/|_____)_|_|_| \__)_____)\____)_| |_|
    (C)2013 Semtech
Description: Ping-Pong implementation
License: Revised BSD License, see LICENSE.TXT file include in the project
Maintainer: Miguel Luis and Gregory Cristian
*/
#include <string.h>
#include "board.h"
#include "radio.h"
#include "aes.h"
#include "stm32l0xx_hal_flash.h"
#include "simonspeck.h"
// Setup for S76 or S78
#define RF_FREQUENCY                                920000000 // Hz
#define TX_OUTPUT_POWER                             13        // dBm


#if defined( USE_MODEM_LORA )

#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       7        // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        5         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         5         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false

#elif defined( USE_MODEM_FSK )

#define FSK_FDEV                                    25e3      // Hz
#define FSK_DATARATE                                50e3      // bps
#define FSK_BANDWIDTH                               50e3      // Hz
#define FSK_AFC_BANDWIDTH                           83.333e3  // Hz
#define FSK_PREAMBLE_LENGTH                         5         // Same for Tx and Rx
#define FSK_FIX_LENGTH_PAYLOAD_ON                   false

#else
    #error "Please define a modem in the compiler options."
#endif

typedef enum
{
    LOWPOWER,
    RX,
    RX_TIMEOUT,
    RX_ERROR,
    TX,
    TX_TIMEOUT,
}States_t;
#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 8 // Define the payload size here <defaul=64>

uint16_t BufferSize = BUFFER_SIZE,count=0;
uint8_t Buffer[BUFFER_SIZE];
//Buffer[0]=1;
States_t State = LOWPOWER;
int16_t RssiValue = 0;
int8_t SnrValue = 0;

/*!
 * Radio events function pointer
 */
static RadioEvents_t RadioEvents;

/*!
 * \brief Function to be executed on Radio Tx Done event
 */
void OnTxDone( void );

/*!
 * \brief Function to be executed on Radio Rx Done event
 */
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr );

/*!
 * \brief Function executed on Radio Tx Timeout event
 */
void OnTxTimeout( void );

/*!
 * \brief Function executed on Radio Rx Timeout event
 */
void OnRxTimeout( void );

/*!
 * \brief Function executed on Radio Rx Error event
 */
void OnRxError( void );

void delay(uint16_t time ){
	while(time--){
}
}
#define USER_FLASH_MAGIC_ADDR (uint32_t) 0x08080000
#define USER_FLASH_COUNTER_ADDR (uint32_t) (USER_FLASH_MAGIC_ADDR + 4)
#define MAGIC_NUMBER (uint32_t) 0x00110000


/* Simon */
uint8_t plaintext[8] = {0};
uint32_t Pt[2]={0};

uint32_t k[4]={0x03020100,
0x0B0A0908,
0x13121110,
0x1B1A1918}; 

uint32_t rk[44] ={0};
uint32_t Ct[2] = {0};

/**
 * Main application entry point.
 */
int main( void )
{
		char sum;
    BoardInitMcu( );
    //BoardInitPeriph( );
		//RtcInit( );
		HAL_FLASHEx_DATAEEPROM_Unlock();
	
		HAL_FLASH_Unlock();
		uint32_t data = *(uint32_t *) USER_FLASH_MAGIC_ADDR;
		uint32_t counter = 0;
		if (data == MAGIC_NUMBER) {
			counter = *(uint32_t *) USER_FLASH_COUNTER_ADDR;
		}
		else {
			data = MAGIC_NUMBER;
			*(uint32_t *) USER_FLASH_MAGIC_ADDR = data;
		}
	
		Buffer[0] = 2;
		Buffer[1] = 3;
		sum = Buffer[0] + Buffer[1];
		Buffer[2] = sum/10;
		Buffer[3] = sum%10;

		uint32_t pt[2]={0};
		uint32_t rk[44] ={0};
		uint32_t ct[2] = {0};
		pt[0] = (uint32_t) Buffer[0] | (uint32_t) (Buffer[1] << 8) | (uint32_t) (Buffer[2] << 16) | (uint32_t) (Buffer[3] << 24);
		pt[1] = counter;
		Speck64128KeySchedule(k, rk);
    Speck64128Encrypt(pt,ct,rk);
		Buffer[0] = (uint8_t)(ct[0] & 0xff);
		Buffer[1] = (uint8_t)((ct[0] >> 8) & 0xff);
		Buffer[2] = (uint8_t)((ct[0] >> 16) & 0xff);
		Buffer[3] = (uint8_t)((ct[0] >> 24) & 0xff);
		Buffer[4] = (uint8_t)(ct[1] & 0xff);
		Buffer[5] = (uint8_t)((ct[1] >> 8)  & 0xff);
		Buffer[6] = (uint8_t)((ct[1] >> 16) & 0xff);
		Buffer[7] = (uint8_t)((ct[1] >> 24) & 0xff);

//		uint8_t expected_plaintext[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
//		uint8_t plaintext[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
//		plaintext[0] = counter & 0xff;
//		plaintext[1] = (counter >> 8) & 0xff;
//		plaintext[2] = (counter >> 16) & 0xff;
//		plaintext[3] = (counter >> 24) & 0xff;
//		//uint8_t expected_ciphertext_128[16] = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};
//		uint8_t ciphertext[16];
//		uint8_t key_128[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
//		uint8_t o_key[16];

//		aes_encrypt_128( plaintext,
//                     ciphertext,
//                     key_128,
//                     o_key);

//		Buffer[0] = Buffer[0] ^ ciphertext[0];
//		Buffer[1] = Buffer[1] ^ ciphertext[1];
//		Buffer[2] = Buffer[2] ^ ciphertext[2];
//		Buffer[3] = Buffer[3] ^ ciphertext[3];

		++counter;
		*(uint32_t *) USER_FLASH_COUNTER_ADDR = counter;

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
    //RadioEvents.RxDone = OnRxDone;
    RadioEvents.TxTimeout = OnTxTimeout;
    //RadioEvents.RxTimeout = OnRxTimeout;
    //RadioEvents.RxError = OnRxError;

    Radio.Init( &RadioEvents );

    Radio.SetChannel( RF_FREQUENCY );

#if defined( USE_MODEM_LORA )

    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
    
    /*Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );
		*/
																	 

#elif defined( USE_MODEM_FSK )

    Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
                                  FSK_DATARATE, 0,
                                  FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                  true, 0, 0, 0, 3000 );
    
    Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
                                  0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                  0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                                  0, 0,false, true );
																	

#else
    #error "Please define a frequency band in the compiler options."
#endif

					Radio.Send(Buffer,BUFFER_SIZE);
					//Demo_Enter_Stop_Mode(3, GPIOC);
}

void OnTxDone( void )
{
    Radio.Sleep( );	
    //State = TX;
		//count=count+1;
}

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    BufferSize = size;
    memcpy( Buffer, payload, BufferSize );
    RssiValue = rssi;
    SnrValue = snr;
    State = RX;
}

void OnTxTimeout( void )
{
    //Radio.Sleep( );
    //State = TX_TIMEOUT;
}

void OnRxTimeout( void )
{
    //Radio.Sleep( );
    //State = RX_TIMEOUT;
}

void OnRxError( void )
{
    Radio.Rx(0);
    State = RX_ERROR;
}
